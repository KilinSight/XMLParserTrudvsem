{% extends 'base.html.twig' %}


{% block stylesheets %}
    {{ parent() }}

{% endblock %}

{% block body %}
    <body>

    <div class="container content text-center">
        <div class="row">
            <div class="col-md-12">
                <div class="panel-body">
                    <h1><span>Обработка открытых данных с сайта trudvsem.ru</h1>
                </div>
            </div>
        </div>
            <div class="row both-col">
            <div class="left-col">
                <form action="/get_results" method="POST" class="search-form">
                    <h5>Введите параметры поиска:</h5>
                    <div class="c-vacancies">
                        <input  autocomplete="off" class="c-vacancies__input form-control" type="text" id="searchQuery" name="searchQuery" placeholder="Введите вакансию">
                        <ul class="c-vacancies__container">
                        </ul>
                    </div>
                    <button class="btn btn-default" type="submit" name="search" value="1">Поиск</button>
                </form>
            </div>
                <div class="right-col">
                    <h2>Выберите параметры в меню</h2>
                </div>
            </div>
        </div>
    </div>

    </body>
    </html>

{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        var progress = {'done':false, 'offset':0};
        var count = 1;
        var timeout;
        var sendAjaxVacancies = function (progress) {
            $.ajax({
                url: Routing.generate('api_vacancies'),
                data: {
                    limit: 5000,
                    offset: progress.offset
                },
                success: function (arr) {
                    data = JSON.parse(arr);
                    if (!progress.done){
                        progress.offset = data.offset;
                        progress.done = data.done;
                        timeout = setTimeout(sendAjaxVacancies,5000,progress);
                    }else{
                        progress.offset = data.offset;
                        progress.done = data.done;
                        clearTimeout(timeout);
                    }
                }
            });
        };
        $('#update_db').on('click',function(){
            sendAjaxVacancies(progress);
        });
        $(document).ready(function (){
            var arrRegions =[];
            $.ajax({
                url: Routing.generate('api_regions'),
                success:function(data) {
                    var regions = JSON.parse(data);
                    console.log(regions.region[0].name);
                    regions.region.map(function(item,key){
                        // console.log(item);
                        arrRegions.push({"name": item.name, "code": item.code });
                    });

                    sortRegions();
                }
            });

            // $.ajax({
            //     url: Routing.generate('api_vacancies'),
            //     success:function(data) {
            //         var regions.region = JSON.parse(data);
            //         console.log(regions);
            //         // regions.region.map(function(item,key){
            //         //     console.log(item.name);
            //         // });
            //     }
            // });


            var arrSort = arrRegions.slice();


            function sortRegions() {
                arrRegions.sort(function (a, b) {
                    return a.name.localeCompare(b.name);
                });
                showData(arrRegions);
            }

            $('.c-regions__input').focus(function () {
                $('.c-regions__container').addClass('c-regions__container--active');
            });


            $('.c-regions__input').blur(function () {
                setTimeout(function() {
                    $('.c-regions__container').removeClass('c-regions__container--active');
                }, 200)
            })

            $('.c-regions__input').keyup(function () {
                var inputValue = $('.c-regions__input').val().toUpperCase(),
                    container = $('.c-regions__container');
                if (inputValue == false) {
                    arrSort = arrRegions.slice();
                    showData(arrRegions);
                }
                else {
                    container.empty();
                    arrSort = [];
                    arrRegions.forEach(function(elem) {

                        if ((elem.name.toUpperCase().indexOf(inputValue) >= 0) || ((''+elem.code).toUpperCase().indexOf(inputValue)) >= 0) {
                            arrSort[arrSort.length] = {
                                name: elem.name,
                                code: elem.code
                            };
                        }
                    })
                    showData(arrSort);
                }
            });


            function showData (arr) {
                var container = $('.c-regions__container'),
                    html = [];

                container.empty();

                arr.forEach(function(value) {
                    html.push('<li data-id="'+ value.code +'">' + value.name + '</li>');
                });
                container.append(html);

                $('.c-regions__container li').click(function () {
                    var regionId = $(this).data('id'),
                        regionName = $(this).html();
                    $('.c-regions__input').attr('data-id',regionId);
                    $('.c-regions__input').val(regionName);

                })
            }
        });

    </script>
{% endblock %}

